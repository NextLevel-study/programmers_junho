package algorithm;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.chrono.ChronoLocalDate;
import java.util.*;

class Person {
    int id;
    int priority;

    Person(int id, int priority) {
        this.id = id;
        this.priority = priority;
    }
}

public class Main {
    public static int solution(int N, int M, int[] arr) {
        int answer = 0;
        Queue<Person> Q = new LinkedList<>();
        for (int i = 0; i < N; i++) {
            Q.offer(new Person(i, arr[i]));
        }
        while (!Q.isEmpty()) {
            Person tmp = Q.poll(); // 맨 앞의 환자를 꺼낸다.
            for (Person p : Q) { // 이후 환자의 위험도를 비교한다.
                if (p.priority > tmp.priority) { // 맨 앞의 환자보다 위험한 환자가 있다면
                    Q.offer(tmp); // 맨 뒤로 보낸다.
                    tmp = null;
                    break;
                }
            }
            if (tmp != null) { // 맨 앞의 환자보다 위험한 환자가 없다면
                answer++;
                if(tmp.id == M) return answer;

            }
        }
        return answer;
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int N = scan.nextInt(); // 총 인원
        int M = scan.nextInt(); // 지정된 환자
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = scan.nextInt();
        }
        System.out.println(Main.solution(N, M, arr));
    }


}

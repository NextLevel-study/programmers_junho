package algorithm;

import java.util.*;

public class Main {
    public static int solution(int N, int M, int[] arr) {
        int answer = 0;
        Arrays.sort(arr); // 오름차순 정렬
        int lt = 0, rt = N - 1;
        while (lt <= rt) {
            int mid = (lt + rt) / 2;
            if (arr[mid] == M) {
                return mid + 1;
            } else if (arr[mid] > M) {
                rt = mid - 1;
            } else if (arr[mid] < M) {
                lt = mid + 1;
            }
        }
        return answer;

        /**
         * 이분 검색
         * 1. 정렬이 된 상태로 시작한다.
         * 2. lt = 0, rt = 배열의 길이
         * 3. mid = (lt + rt) / 2
         * 4. mid가 찾는 값인지 확인.
         * 5. mid가 찾고자 하는 값보다 크다면 왼쪽으로 탐색, 크다면 오른쪽으로 탐색
         * 5-1. arr[mid] > m -> rt = mid -1;
         * 5-2. arr[mid] < m -> lt = mid + 1;
         * 6. 다시 mid (lt + rt) / 2 ~~ 반복
         * 7. 만약에 찾고자 하는 값이 없다면 lt > rt로 됨. 그때는 중단.
         */


    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int N = scan.nextInt();
        int M = scan.nextInt();
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = scan.nextInt();
        }
        System.out.println(Main.solution(N, M, arr));


    }
}
